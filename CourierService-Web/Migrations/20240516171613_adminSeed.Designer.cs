// <auto-generated />
using System;
using CourierService_Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourierService_Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240516171613_adminSeed")]
    partial class adminSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourierService_Web.Models.AccessController", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("AccessControllers");
                });

            modelBuilder.Entity("CourierService_Web.Models.AccessGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessGroups");
                });

            modelBuilder.Entity("CourierService_Web.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = "A-123",
                            Email = "flyerbd@gmail.com",
                            Name = "Admin",
                            Password = "1111"
                        });
                });

            modelBuilder.Entity("CourierService_Web.Models.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HubId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = "AREA-123",
                            DistrictId = "DIS-123",
                            HubId = "HUB-123",
                            Name = "Mirpur",
                            ZoneId = "ZONE-123"
                        });
                });

            modelBuilder.Entity("CourierService_Web.Models.Complain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("Complain");
                });

            modelBuilder.Entity("CourierService_Web.Models.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CourierService_Web.Models.DeliveredParcel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParcelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("RiderId");

                    b.ToTable("DeliveredParcels");
                });

            modelBuilder.Entity("CourierService_Web.Models.District", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = "DIS-123",
                            Name = "Dhaka"
                        });
                });

            modelBuilder.Entity("CourierService_Web.Models.ExchangeParcel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParcelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("RiderId");

                    b.ToTable("ExchangeParcels");
                });

            modelBuilder.Entity("CourierService_Web.Models.Hub", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Hubs");

                    b.HasData(
                        new
                        {
                            Id = "HUB-123",
                            DistrictId = "DIS-123",
                            Name = "Mirpur Hub"
                        });
                });

            modelBuilder.Entity("CourierService_Web.Models.HubPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AmountReceived")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DueAmount")
                        .HasColumnType("int");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.ToTable("HubPayments");
                });

            modelBuilder.Entity("CourierService_Web.Models.Merchant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExtraWeightCharge")
                        .HasColumnType("int");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InDhakaEmergencyDeliveryCharge")
                        .HasColumnType("int");

                    b.Property<int>("InsideDhakaDeliveryCharge")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxiumWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutsideDhakaDeliveryCharge")
                        .HasColumnType("int");

                    b.Property<int>("P2PDeliveryCharge")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubDhakaDeliveryCharge")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("CourierService_Web.Models.MerchantPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AmountPaid")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DueAmount")
                        .HasColumnType("int");

                    b.Property<string>("HubPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubPaymentId");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantPayments");
                });

            modelBuilder.Entity("CourierService_Web.Models.Parcel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AtTheSortingHubAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("COD")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DamagedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryCharge")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryFailedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeliveryOnHoldAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryRiderAssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationHubId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("OnTheWayAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OnTheWayToLastMileHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OnTheWayToSortingHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ParcelAtTheHubReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartialDeliveryAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentInHand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentInHubAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickedUpAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PickupCancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PickupFailedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickupOnHoldAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PickupRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReceivedAtLastMileHubAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnCreateFirstMileHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ReturnOnTheWayToFirstMileHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnOnTheWayToMerchantAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnOnTheWayToSortingHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnReceivedByFirstMileHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnReceivedByMerchantAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnReceivedBySortingHubAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnedAssignedPickupAgentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZoneId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DeliveryId")
                        .IsUnique()
                        .HasFilter("[DeliveryId] IS NOT NULL");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ExchangeId")
                        .IsUnique()
                        .HasFilter("[ExchangeId] IS NOT NULL");

                    b.HasIndex("HubId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ReturnId")
                        .IsUnique()
                        .HasFilter("[ReturnId] IS NOT NULL");

                    b.HasIndex("RiderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("CourierService_Web.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CourierService_Web.Models.RequestPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedPrice")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.ToTable("NotificationsPermission");
                });

            modelBuilder.Entity("CourierService_Web.Models.ReturnParcel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParcelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("RiderId");

                    b.ToTable("ReturnParcels");
                });

            modelBuilder.Entity("CourierService_Web.Models.Rider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("CourierService_Web.Models.RiderPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("HubPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HubPaymentId");

                    b.HasIndex("ParcelId");

                    b.HasIndex("RiderId");

                    b.ToTable("riderPayments");
                });

            modelBuilder.Entity("CourierService_Web.Models.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ZoneId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HubId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("CourierService_Web.Models.Zone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("HubId");

                    b.ToTable("Zone");

                    b.HasData(
                        new
                        {
                            Id = "ZONE-123",
                            DistrictId = "DIS-123",
                            HubId = "HUB-123",
                            Name = "Dhaka"
                        });
                });

            modelBuilder.Entity("CourierService_Web.Models.AccessController", b =>
                {
                    b.HasOne("CourierService_Web.Models.AccessGroup", "AccessGroup")
                        .WithMany("AccessControllers")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("CourierService_Web.Models.Area", b =>
                {
                    b.HasOne("CourierService_Web.Models.District", "District")
                        .WithMany("Areas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("Areas")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CourierService_Web.Models.Zone", "Zone")
                        .WithMany("Areas")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Hub");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CourierService_Web.Models.Complain", b =>
                {
                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany("complains")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("CourierService_Web.Models.DeliveredParcel", b =>
                {
                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("DeliveredParcels")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany("DeliveredParcels")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Rider", "Rider")
                        .WithMany("DeliveredParcels")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hub");

                    b.Navigation("Merchant");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CourierService_Web.Models.ExchangeParcel", b =>
                {
                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("ExchangeParcels")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Rider", "Rider")
                        .WithMany("ExchangeParcels")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hub");

                    b.Navigation("Merchant");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CourierService_Web.Models.Hub", b =>
                {
                    b.HasOne("CourierService_Web.Models.District", "District")
                        .WithMany("Hubs")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("CourierService_Web.Models.HubPayment", b =>
                {
                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("CourierService_Web.Models.Merchant", b =>
                {
                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("Merchants")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("CourierService_Web.Models.MerchantPayment", b =>
                {
                    b.HasOne("CourierService_Web.Models.HubPayment", "HubPayment")
                        .WithMany("MerchantPayments")
                        .HasForeignKey("HubPaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany("MerchantPayments")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HubPayment");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("CourierService_Web.Models.Parcel", b =>
                {
                    b.HasOne("CourierService_Web.Models.Area", "Area")
                        .WithMany("Parcels")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.DeliveredParcel", "DeliveryParcel")
                        .WithOne("Parcel")
                        .HasForeignKey("CourierService_Web.Models.Parcel", "DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.District", "District")
                        .WithMany("Parcels")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.ExchangeParcel", "ExchangeParcel")
                        .WithOne("Parcel")
                        .HasForeignKey("CourierService_Web.Models.Parcel", "ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("Parcels")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany("Parcels")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.ReturnParcel", "ReturnParcel")
                        .WithOne("Parcel")
                        .HasForeignKey("CourierService_Web.Models.Parcel", "ReturnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Rider", "Rider")
                        .WithMany("Parcels")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Store", "Store")
                        .WithMany("Parcels")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Zone", "Zone")
                        .WithMany("Parcels")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("DeliveryParcel");

                    b.Navigation("District");

                    b.Navigation("ExchangeParcel");

                    b.Navigation("Hub");

                    b.Navigation("Merchant");

                    b.Navigation("ReturnParcel");

                    b.Navigation("Rider");

                    b.Navigation("Store");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CourierService_Web.Models.Payment", b =>
                {
                    b.HasOne("CourierService_Web.Models.Parcel", "Parcel")
                        .WithMany("Payments")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("CourierService_Web.Models.RequestPermission", b =>
                {
                    b.HasOne("CourierService_Web.Models.Parcel", "Parcel")
                        .WithMany("Notifications")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("CourierService_Web.Models.ReturnParcel", b =>
                {
                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("ReturnParcels")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Rider", "Rider")
                        .WithMany("ReturnParcels")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hub");

                    b.Navigation("Merchant");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CourierService_Web.Models.Rider", b =>
                {
                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("Riders")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("CourierService_Web.Models.RiderPayment", b =>
                {
                    b.HasOne("CourierService_Web.Models.HubPayment", null)
                        .WithMany("RiderPayments")
                        .HasForeignKey("HubPaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Parcel", "Parcel")
                        .WithMany("riderPayments")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CourierService_Web.Models.Rider", "Rider")
                        .WithMany("riderPayments")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("CourierService_Web.Models.Store", b =>
                {
                    b.HasOne("CourierService_Web.Models.Area", "Area")
                        .WithMany("Stores")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.District", "District")
                        .WithMany("Stores")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("Stores")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Merchant", "Merchant")
                        .WithMany("Stores")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Zone", "Zone")
                        .WithMany("Stores")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("District");

                    b.Navigation("Hub");

                    b.Navigation("Merchant");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CourierService_Web.Models.Zone", b =>
                {
                    b.HasOne("CourierService_Web.Models.District", "District")
                        .WithMany("Zones")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CourierService_Web.Models.Hub", "Hub")
                        .WithMany("Zones")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("District");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("CourierService_Web.Models.AccessGroup", b =>
                {
                    b.Navigation("AccessControllers");
                });

            modelBuilder.Entity("CourierService_Web.Models.Area", b =>
                {
                    b.Navigation("Parcels");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("CourierService_Web.Models.DeliveredParcel", b =>
                {
                    b.Navigation("Parcel")
                        .IsRequired();
                });

            modelBuilder.Entity("CourierService_Web.Models.District", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Hubs");

                    b.Navigation("Parcels");

                    b.Navigation("Stores");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("CourierService_Web.Models.ExchangeParcel", b =>
                {
                    b.Navigation("Parcel")
                        .IsRequired();
                });

            modelBuilder.Entity("CourierService_Web.Models.Hub", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("DeliveredParcels");

                    b.Navigation("ExchangeParcels");

                    b.Navigation("Merchants");

                    b.Navigation("Parcels");

                    b.Navigation("ReturnParcels");

                    b.Navigation("Riders");

                    b.Navigation("Stores");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("CourierService_Web.Models.HubPayment", b =>
                {
                    b.Navigation("MerchantPayments");

                    b.Navigation("RiderPayments");
                });

            modelBuilder.Entity("CourierService_Web.Models.Merchant", b =>
                {
                    b.Navigation("DeliveredParcels");

                    b.Navigation("MerchantPayments");

                    b.Navigation("Parcels");

                    b.Navigation("Stores");

                    b.Navigation("complains");
                });

            modelBuilder.Entity("CourierService_Web.Models.Parcel", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("riderPayments");
                });

            modelBuilder.Entity("CourierService_Web.Models.ReturnParcel", b =>
                {
                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("CourierService_Web.Models.Rider", b =>
                {
                    b.Navigation("DeliveredParcels");

                    b.Navigation("ExchangeParcels");

                    b.Navigation("Parcels");

                    b.Navigation("ReturnParcels");

                    b.Navigation("riderPayments");
                });

            modelBuilder.Entity("CourierService_Web.Models.Store", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("CourierService_Web.Models.Zone", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Parcels");

                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
